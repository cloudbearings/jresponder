<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.1.xsd
	       http://www.springframework.org/schema/tx
	       http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
           ">

    <bean id="jrDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close"
        p:driverClass="org.h2.Driver" p:user="sa" p:password="" >
        <!-- To manually mess with the database, run the h2.jar file by itself
             and have the web UI it presents connect to this same URL
             (except expand the path so it's absolute, otherwise it doesn't know
             where your project lives).  Leave that open and then run
             a test.  It will allow you to see the data post-mortem, or while
             running/debugging. -->
        <property name="jdbcUrl" value="jdbc:h2:build-test/db/jresponder-test;AUTO_SERVER=TRUE"/>
        
    </bean>
    
    <bean id="jrEntityManagerFactory" class="org.jresponder.standalone.JrEntityManagerFactory">
        <property name="addProps">
            <map>
                <entry key="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/>
                <!-- do create instead of create-drop, so you can analyze what happened
                     after a failed test if you need to - useful for debugging
                     individual test cases -->
                <entry key="hibernate.hbm2ddl.auto" value="create"/>
            </map>
        </property>
        <property name="dataSource" ref="jrDataSource" />
        <property name="jpaVendorAdapter" ref="jrJpaVendorAdapter"/>
    </bean>
    
    <tx:annotation-driven transaction-manager="transactionManager" />

    <bean id="jrJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="jrEntityManagerFactory" />
    </bean>


</beans>
